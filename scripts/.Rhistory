p.adj = m*hm*p_value/rank)
library(tidyverse)
library(infer)
library(randomForest)
library(tidymodels)
library(modelr)
library(yardstick)
ttests_out <- biomarker_clean %>%
# drop ADOS score
select(-ados) %>%
# arrange in long format
pivot_longer(-group,
names_to = 'protein',
values_to = 'level') %>%
# nest by protein
nest(data = c(level, group)) %>%
# compute t tests
mutate(ttest = map(data, test_fn)) %>%
unnest(ttest) %>%
# sort by p-value
arrange(p_value) %>%
# multiple testing correction
mutate(m = n(),
hm = log(m) + 1/(2*m) - digamma(1),
rank = row_number(),
p.adj = m*hm*p_value/rank)
proteins_s1 <- ttests_out %>%
slice_min(p.adj, n = 10) %>%
pull(protein)
predictors <- biomarker_clean %>%
select(-c(group, ados))
response <- biomarker_clean %>% pull(group) %>% factor()
set.seed(101422)
rf_out <- randomForest(x = predictors,
y = response,
ntree = 1000,
importance = T)
# check errors
rf_out$confusion
proteins_s2 <- rf_out$importance %>%
as_tibble() %>%
mutate(protein = rownames(rf_out$importance)) %>%
slice_max(MeanDecreaseGini, n = 10) %>%
pull(protein)
proteins_sstar <- intersect(proteins_s1, proteins_s2)
biomarker_sstar <- biomarker_clean %>%
select(group, any_of(proteins_sstar)) %>%
mutate(class = (group == 'ASD')) %>%
select(-group)
set.seed(101422)
biomarker_split <- biomarker_sstar %>%
initial_split(prop = 0.8)
fit <- glm(class ~ .,
data = training(biomarker_split),
family = 'binomial')
class_metrics <- metric_set(sensitivity,
specificity,
accuracy,
roc_auc)
testing(biomarker_split) %>%
add_predictions(fit, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second')
source("~/.active-rstudio-document", echo=TRUE)
source("inclass-analysis.R")
load('../data/biomarker-clean.RData')
# training & testing partition
set.seed(1234)
data_split <- initial_split(biomarker_clean, prop = 0.7, strata = group)
data_train <- training(data_split)
data_test <- testing(data_split)
data_split <- initial_split(biomarker_clean, prop = 0.7, strata = group)
data_train <- training(data_split)
data_test <- testing(data_split)
data_split <- initial_split(biomarker_clean, prop = 0.8, strata = group)
data_train <- training(data_split)
data_test <- testing(data_split)
ttests_out_train <- data_train %>%
# drop ADOS score
select(-ados) %>%
# arrange in long format
pivot_longer(-group,
names_to = 'protein',
values_to = 'level') %>%
# nest by protein
nest(data = c(level, group)) %>%
# compute t tests
mutate(ttest = map(data, test_fn)) %>%
unnest(ttest) %>%
# sort by p-value
arrange(p_value) %>%
# multiple testing correction
mutate(m = n(),
hm = log(m) + 1/(2*m) - digamma(1),
rank = row_number(),
p.adj = m*hm*p_value/rank)
# select significant proteins
proteins_s1 <- ttests_out %>%
slice_min(p.adj, n = 10) %>%
pull(protein)
# select significant proteins
proteins_s1_train <- ttests_out_train %>%
slice_min(p.adj, n = 10) %>%
pull(protein)
ttests_out_train <- data_train %>%
# drop ADOS score
select(-ados) %>%
# arrange in long format
pivot_longer(-group,
names_to = 'protein',
values_to = 'level') %>%
# nest by protein
nest(data = c(level, group)) %>%
# compute t tests
mutate(ttest = map(data, test_fn)) %>%
unnest(ttest) %>%
# sort by p-value
arrange(p_value) %>%
# multiple testing correction
mutate(m = n(),
hm = log(m) + 1/(2*m) - digamma(1),
rank = row_number(),
p.adj = m*hm*p_value/rank)
# select significant proteins
proteins_s1_train <- ttests_out_train %>%
slice_min(p.adj, n = 10) %>%
pull(protein)
## comparison table ##
######################
predictors <- biomarker_clean %>%
select(-c(group, ados))
response <- biomarker_clean %>% pull(group) %>% factor()
cbind(original = proteins_s1, training = proteins_s1_train)
response_train <- data_train %>% pull(group) %>% factor()
## training split random forest ##
##################################
predictors_train <- data_train %>%
select(-c(group, ados))
rf_out <- randomForest(x = predictors_train,
y = response_train,
ntree = 1000,
importance = T)
rf_out <- randomForest(x = predictors,
y = response,
ntree = 1000,
importance = T)
rf_train <- randomForest(x = predictors_train,
y = response_train,
ntree = 1000,
importance = T)
# check errors
rf_traian$confusion
# check errors
rf_train$confusion
# compute importance scores
proteins_s2_train <- rf_train$importance %>%
as_tibble() %>%
mutate(protein = rownames(rf_out$importance)) %>%
slice_max(MeanDecreaseGini, n = 10) %>%
pull(protein)
# select subset of interest
proteins_sstar_train <- intersect(proteins_s1_train, proteins_s2_train)
biomarker_sstar_train <- data_train %>%
select(group, any_of(proteins_sstar_train)) %>%
mutate(class = (group == 'ASD')) %>%
select(-group)
# partition into training and test set
set.seed(101422)
biomarker_split_train <- biomarker_sstar_train %>%
initial_split(prop = 0.8)
# fit logistic regression model to training set
fit <- glm(class ~ .,
data = training(biomarker_split_train),
family = 'binomial')
# fit logistic regression model to training set
fit_train <- glm(class ~ .,
data = training(biomarker_split_train),
family = 'binomial')
# evaluate errors on test set
class_metrics <- metric_set(sensitivity,
specificity,
accuracy,
roc_auc)
testing(biomarker_split_train) %>%
add_predictions(fit, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second')
biomarker_sstar_test <- data_test %>%
select(group, any_of(proteins_sstar_train)) %>%
mutate(class = (group == 'ASD')) %>%
select(-group)
# fit logistic regression model to training set
fit_train <- glm(class ~ .,
data = training(biomarker_sstar_train),
family = 'binomial')
# fit logistic regression model to training set
fit_train <- glm(class ~ .,
data = biomarker_sstar_train,
family = 'binomial')
# evaluate errors on test set
class_metrics <- metric_set(sensitivity,
specificity,
accuracy,
roc_auc)
testing(biomarker_sstar_test) %>%
add_predictions(fit, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second')
# fit logistic regression model to training set
fit_train <- glm(class ~ .,
data = biomarker_train,
family = 'binomial')
# fit logistic regression model to training set
fit_train <- glm(class ~ .,
data = biomarker_sstar_train,
family = 'binomial')
testing(data_test) %>%
add_predictions(fit_train, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second')
testing(biomarker_sstar_test) %>%
add_predictions(fit_train, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second')
rlang::last_trace()
testing(data_split) %>%
add_predictions(fit_train, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second')
biomarker_sstar_test %>%
add_predictions(fit_train, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second')
testing(biomarker_split) %>%
add_predictions(fit, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second')
# select subset of interest
proteins_sstar <- intersect(proteins_s1, proteins_s2)
biomarker_sstar <- biomarker_clean %>%
select(group, any_of(proteins_sstar)) %>%
mutate(class = (group == 'ASD')) %>%
select(-group)
biomarker_split <- biomarker_sstar %>%
initial_split(prop = 0.8)
# fit logistic regression model to training set
fit <- glm(class ~ .,
data = training(biomarker_split),
family = 'binomial')
# evaluate errors on test set
class_metrics <- metric_set(sensitivity,
specificity,
accuracy,
roc_auc)
testing(biomarker_split) %>%
add_predictions(fit, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second')
biomarker_sstar_test %>%
add_predictions(fit_train, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second')
library(tidyverse)
library(infer)
library(randomForest)
library(tidymodels)
library(modelr)
library(yardstick)
load('../data/biomarker-clean.RData')
## MULTIPLE TESTING
####################
# function to compute tests
test_fn <- function(.df){
t_test(.df,
formula = level ~ group,
order = c('ASD', 'TD'),
alternative = 'two-sided',
var.equal = F)
}
ttests_out <- biomarker_clean %>%
# drop ADOS score
select(-ados) %>%
# arrange in long format
pivot_longer(-group,
names_to = 'protein',
values_to = 'level') %>%
# nest by protein
nest(data = c(level, group)) %>%
# compute t tests
mutate(ttest = map(data, test_fn)) %>%
unnest(ttest) %>%
# sort by p-value
arrange(p_value) %>%
# multiple testing correction
mutate(m = n(),
hm = log(m) + 1/(2*m) - digamma(1),
rank = row_number(),
p.adj = m*hm*p_value/rank)
# select significant proteins
proteins_s1 <- ttests_out %>%
slice_min(p.adj, n = 10) %>%
pull(protein)
## RANDOM FOREST
##################
# store predictors and response separately
predictors <- biomarker_clean %>%
select(-c(group, ados))
response <- biomarker_clean %>% pull(group) %>% factor()
# fit RF
set.seed(101422)
rf_out <- randomForest(x = predictors,
y = response,
ntree = 1000,
importance = T)
# check errors
rf_out$confusion
# compute importance scores
proteins_s2 <- rf_out$importance %>%
as_tibble() %>%
mutate(protein = rownames(rf_out$importance)) %>%
slice_max(MeanDecreaseGini, n = 10) %>%
pull(protein)
## LOGISTIC REGRESSION
#######################
# select subset of interest
proteins_sstar <- intersect(proteins_s1, proteins_s2)
biomarker_sstar <- biomarker_clean %>%
select(group, any_of(proteins_sstar)) %>%
mutate(class = (group == 'ASD')) %>%
select(-group)
# partition into training and test set
set.seed(101422)
biomarker_split <- biomarker_sstar %>%
initial_split(prop = 0.8)
# fit logistic regression model to training set
fit <- glm(class ~ .,
data = training(biomarker_split),
family = 'binomial')
# evaluate errors on test set
class_metrics <- metric_set(sensitivity,
specificity,
accuracy,
roc_auc)
testing(biomarker_split) %>%
add_predictions(fit, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second')
library(tidyverse)
library(infer)
library(randomForest)
library(tidymodels)
library(modelr)
library(yardstick)
load('../data/biomarker-clean.RData')
## training & testing partition ##
##################################
set.seed(1234)
data_split <- initial_split(biomarker_clean, prop = 0.8, strata = group)
data_train <- training(data_split)
data_test <- testing(data_split)
## training split multiple testing ##
#####################################
ttests_out_train <- data_train %>%
# drop ADOS score
select(-ados) %>%
# arrange in long format
pivot_longer(-group,
names_to = 'protein',
values_to = 'level') %>%
# nest by protein
nest(data = c(level, group)) %>%
# compute t tests
mutate(ttest = map(data, test_fn)) %>%
unnest(ttest) %>%
# sort by p-value
arrange(p_value) %>%
# multiple testing correction
mutate(m = n(),
hm = log(m) + 1/(2*m) - digamma(1),
rank = row_number(),
p.adj = m*hm*p_value/rank)
# select significant proteins
proteins_s1_train <- ttests_out_train %>%
slice_min(p.adj, n = 10) %>%
pull(protein)
## training split random forest ##
##################################
predictors_train <- data_train %>%
select(-c(group, ados))
response_train <- data_train %>% pull(group) %>% factor()
# fit RF
set.seed(101422)
rf_train <- randomForest(x = predictors_train,
y = response_train,
ntree = 1000,
importance = T)
# check errors
rf_train$confusion
# compute importance scores
proteins_s2_train <- rf_train$importance %>%
as_tibble() %>%
mutate(protein = rownames(rf_out$importance)) %>%
slice_max(MeanDecreaseGini, n = 10) %>%
pull(protein)
## training split logistic regression ##
########################################
# select subset of interest
proteins_sstar_train <- intersect(proteins_s1_train, proteins_s2_train)
biomarker_sstar_train <- data_train %>%
select(group, any_of(proteins_sstar_train)) %>%
mutate(class = (group == 'ASD')) %>%
select(-group)
biomarker_sstar_test <- data_test %>%
select(group, any_of(proteins_sstar_train)) %>%
mutate(class = (group == 'ASD')) %>%
select(-group)
# fit logistic regression model to training set
fit_train <- glm(class ~ .,
data = biomarker_sstar_train,
family = 'binomial')
# evaluate errors on test set
class_metrics <- metric_set(sensitivity,
specificity,
accuracy,
roc_auc)
biomarker_sstar_test %>%
add_predictions(fit_train, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second')
results <- biomarker_sstar_test %>%
add_predictions(fit_train, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second')
results_train <- biomarker_sstar_test %>%
add_predictions(fit_train, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second')
results_classs <- testing(biomarker_split) %>%
add_predictions(fit, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second')
testing(biomarker_split) %>%
add_predictions(fit, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second') %>%
write.csv("../results/figures/inclass_results.csv")
# storing protein selections
cbind(proteins_s1, proteins_s2, proteins_sstar)
# storing protein selections
cbind(proteins_s1, proteins_s2)
proteins_s2 <- write.csv("../results/figures/inclass_proteins_s2")
# storing protein selections
proteins_s1 <- write.csv("../results/figures/inclass_proteins_s1")
# compute importance scores
proteins_s2 <- rf_out$importance %>%
as_tibble() %>%
mutate(protein = rownames(rf_out$importance)) %>%
slice_max(MeanDecreaseGini, n = 10) %>%
pull(protein)
# select significant proteins
proteins_s1 <- ttests_out %>%
slice_min(p.adj, n = 10) %>%
pull(protein)
# storing protein selections
proteins_s1 %>%  write.csv("../results/figures/inclass_proteins_s1")
proteins_s2 %>%  write.csv("../results/figures/inclass_proteins_s2")
# storing protein selections
proteins_s1 %>%  write.csv("../results/figures/inclass_proteins_s1.csv")
proteins_s2 %>%  write.csv("../results/figures/inclass_proteins_s2.csv")
proteins_sstar %>% write.csv("../results/figures/inclass_proteins_sstar.csv")
results_train <- biomarker_sstar_test %>%
add_predictions(fit_train, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second') %>%
write.csv("../results/figures/q3-1_results.csv")
proteins_s1_train %>%  write.csv("../results/figures/q3-1_proteins_s1.csv")
proteins_s2_train %>%  write.csv("../results/figures/q3-1_proteins_s2.csv")
proteins_sstar_train %>% write.csv("../results/figures/q3-1_proteins_sstar.csv")
