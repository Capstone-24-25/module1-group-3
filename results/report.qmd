---
title: "Biomarkers of ASD"
author: "Daniel Yan, Ziqian Zhao, Nazhah Mir, Xiaofeng Cai"
date: last-modified
published-title: "Updated"
editor: visual
format: html
code-copy: true
execute:
  message: false
  warning: false
  echo: false
  cache: true
---

```{r results = FALSE}
# load any other packages and read data here
library(tidyverse)
library(ggplot2)
library(readr)
library(dplyr)
library(infer)
library(randomForest)
library(tidymodels)
library(modelr)
library(yardstick)
```

## Abstract

Write a brief one-paragraph abstract that describes the contents of your write-up.

## Dataset

Write a brief data description, including: how data were obtained; sample characteristics; variables measured; and data preprocessing. This can be largely based on the source paper and should not exceed 1-2 paragraphs.

The data provided in Hewitson et al. (2021) were initially collected in 2017 consists of 154 male pediatric subjects (mostly White/Caucasian and Hispanic/Latino, over 80% of the sample size). All participants were classified into two groups: ASD (autism spectrum disorder) and TD (typically developing). The ASD group was comprised of 76 subjects with a mean age of 5.6 years (SD 1.7 years); The TD group was comprised of 78 subjects with a mean age of 5.7 years (SD 2.0 years). 1317 protein were measured for each sample, 192 of them were failed in the quality control, so 1125 protein were analyzed. Addition to quality control, the data were normalized by taking log transformation and trimming out the outlier by z-transformation. 

## Summary of published analysis

Summarize the methodology of the paper in 1-3 paragraphs. You need not explain the methods in depth as we did in class; just indicate what methods were used and how they were combined. If possible, include a diagram that depicts the methodological design. (Quarto has support for [GraphViz and Mermaid flowcharts](https://quarto.org/docs/authoring/diagrams.html).) Provide key results: the proteins selected for the classifier and the estimated accuracy.

To find the protein for ASD prediction, the paper uses three different methods: random forest(RF), t-test, and correlation-based methods.

Specifically, they use three methods to select the top ten predictive protein from each method, find their intersection : `DERM`, `suPAR`, `MAPK14`, `EPHB2`, and `IgD`.

```{mermaid}
flowchart LR
  A[Data Collected] --> B(Preprocessing)
  B --> C(Random Forest)
  B --> D(t-test)
  B --> E(correlation-based method)
  C --> F{5 core protein} 
  D --> F{5 core protein}
  E --> F{5 core protein}
```

Taking those as the core protein, a prediction model is trained with them. They further investigate the 13 left proteins in whether they provided additive predictive power. Along with these model, a logistic regression model is implemented to investigate the accuracy. Four additional proteins provided additive predicitve power, so 9 preoteins resulted in an AUC of 86% with a sensitivity of 83% and specificity of 84%.

## Findings

Summarize your findings here. I've included some subheaders in a way that seems natural to me; you can structure this section however you like.

### Impact of preprocessing and outliers

#### Task 1

```{r}
load("../data/biomarker-clean.RData")

# clean data without log-transformation
var_names <- read_csv('../data/biomarker-raw.csv', 
                      col_names = F, 
                      n_max = 2, 
                      col_select = -(1:2)) %>%
  t() %>%
  as_tibble() %>%
  rename(name = V1, 
         abbreviation = V2) %>%
  na.omit()

biomarker_raw <- read_csv('../data/biomarker-raw.csv', 
                            skip = 2,
                            col_select = -2L,
                            col_names = c('group', 
                                          'empty',
                                          pull(var_names, abbreviation),
                                          'ados'),
                            na = c('-', '')) %>%
  filter(!is.na(group))

```

```{r}
#investigate the potential reason for log-transformation
# check normality for some protein

par(mfrow = c(1, 2))

qqnorm(main = "Raw Data Q-Q plot for `Mcl-1`", biomarker_raw$`Mcl-1`)
qqline(biomarker_raw$`Mcl-1`, col = "red")
qqnorm(main = "Clean Data Q-Q plot for `Mcl-1`",biomarker_clean$`Mcl-1`)
qqline(biomarker_clean$`Mcl-1`, col = "red")

```

```{r}
par(mfrow = c(1, 2))
qqnorm(main = "Clean Data Q-Q plot for `DERM`",biomarker_raw$DERM)
qqline(biomarker_raw$DERM, col = "red")
qqnorm(main = "Clean Data Q-Q plot for `DERM`",biomarker_clean$DERM)
qqline(biomarker_clean$DERM, col = "red")
```

We compare the data before processing and after processing. Specifically, we compare the raw data set and data after log-transformation and scaling. We randomly selected two sample protein type and examine the normality. It could be seen that `DERM` is normally distributed before pre-porcessing but not centered at 0, while `Mcl-1` is neither normally distributed nor centralized. Therefore, we could conclude that not all protein types are normally distributed in the raw data, so a log-transformation is used. In this way, the data used for further model training could be more reliable.

#### Task 2

First, we will counting the number of outliers (Z-scores > 3 standard deviation from the mean) per subject.

```{r, message = F}
z_score <- biomarker_clean %>%
  group_by(group) %>%
  mutate(across(where(is.numeric), ~ scale(.))) %>%
  ungroup()

outlier_counts <- z_score %>%
  mutate(across(where(is.numeric), ~ abs(.) > 3)) %>%
  group_by(group) %>%
  summarise(across(where(is.logical), sum, na.rm = T))
```

Most subjects have 0 to 3 outliers, but we are more interested in subjects with more than 4 outliers.

```{r}
outliers_ge_4 <- outlier_counts %>%
  pivot_longer(cols = -group, names_to = "Column", values_to = "Outlier_Count") %>%
  filter(Outlier_Count >= 4) %>%
  arrange(group, desc(Outlier_Count))
outliers_ge_4
```

```{r}
group_counts <- outliers_ge_4 %>%
  count(group)
group_counts
```

We found that the ASD group has 16 subjects with outliers greater than 4, with a maximum of 5 outliers per subject. The TD group has 18 subjects with outliers greater than 4, with a maximum of 4 outliers per subject.

```{r}
total_outliers_by_group <- outlier_counts %>%
  rowwise() %>%
  mutate(Total_Outliers = sum(c_across(where(is.numeric)), na.rm = T)) %>%
  select(group, Total_Outliers)
total_outliers_by_group
```

We also calculated the total number of outliers within each group and found that there are more outliers in the TD group than in the ASD group.

### Methodological variations

**Original Methodology (from *inclass-analysis.R*):**

```{r}
load('../data/biomarker-clean.RData')

## MULTIPLE TESTING
####################

# function to compute tests
test_fn <- function(.df){
  t_test(.df, 
         formula = level ~ group,
         order = c('ASD', 'TD'),
         alternative = 'two-sided',
         var.equal = F)
}

ttests_out <- biomarker_clean %>%
  # drop ADOS score
  select(-ados) %>%
  # arrange in long format
  pivot_longer(-group, 
               names_to = 'protein', 
               values_to = 'level') %>%
  # nest by protein
  nest(data = c(level, group)) %>% 
  # compute t tests
  mutate(ttest = map(data, test_fn)) %>%
  unnest(ttest) %>%
  # sort by p-value
  arrange(p_value) %>%
  # multiple testing correction
  mutate(m = n(),
         hm = log(m) + 1/(2*m) - digamma(1),
         rank = row_number(),
         p.adj = m*hm*p_value/rank)

# select significant proteins
proteins_s1 <- ttests_out %>%
  slice_min(p.adj, n = 10) %>%
  pull(protein)

## RANDOM FOREST
##################

# store predictors and response separately
predictors <- biomarker_clean %>%
  select(-c(group, ados))

response <- biomarker_clean %>% pull(group) %>% factor()

# fit RF
set.seed(101422)
rf_out <- randomForest(x = predictors, 
                       y = response, 
                       ntree = 1000, 
                       importance = T)

# check errors
# rf_out$confusion

# compute importance scores
proteins_s2 <- rf_out$importance %>% 
  as_tibble() %>%
  mutate(protein = rownames(rf_out$importance)) %>%
  slice_max(MeanDecreaseGini, n = 10) %>%
  pull(protein)

## LOGISTIC REGRESSION
#######################

# select subset of interest
proteins_sstar <- intersect(proteins_s1, proteins_s2)

biomarker_sstar <- biomarker_clean %>%
  select(group, any_of(proteins_sstar)) %>%
  mutate(class = (group == 'ASD')) %>%
  select(-group)

# partition into training and test set
set.seed(101422)
biomarker_split <- biomarker_sstar %>%
  initial_split(prop = 0.8)

# fit logistic regression model to training set
fit <- glm(class ~ ., 
           data = training(biomarker_split), 
           family = 'binomial')

# evaluate errors on test set
class_metrics <- metric_set(sensitivity, 
                            specificity, 
                            accuracy,
                            roc_auc)

testing(biomarker_split) %>%
  add_predictions(fit, type = 'response') %>%
  mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
  class_metrics(estimate = est,
              truth = tr_c, pred,
              event_level = 'second')
```

**Task 3** **(Data split before variable selection)**

```{r}
## training & testing partition ##
##################################

set.seed(1234)

data_split <- initial_split(biomarker_clean, prop = 0.8, strata = group)
data_train <- training(data_split)
data_test <- testing(data_split)

## training split multiple testing ##
#####################################

ttests_out_train <- data_train %>%
  # drop ADOS score
  select(-ados) %>%
  # arrange in long format
  pivot_longer(-group, 
               names_to = 'protein', 
               values_to = 'level') %>%
  # nest by protein
  nest(data = c(level, group)) %>% 
  # compute t tests
  mutate(ttest = map(data, test_fn)) %>%
  unnest(ttest) %>%
  # sort by p-value
  arrange(p_value) %>%
  # multiple testing correction
  mutate(m = n(),
         hm = log(m) + 1/(2*m) - digamma(1),
         rank = row_number(),
         p.adj = m*hm*p_value/rank)

# select significant proteins
proteins_s1_train <- ttests_out_train %>%
  slice_min(p.adj, n = 10) %>%
  pull(protein)

## training split random forest ##
##################################
predictors_train <- data_train %>%
  select(-c(group, ados))

response_train <- data_train %>% pull(group) %>% factor()

# fit RF
set.seed(101422)
rf_train <- randomForest(x = predictors_train, 
                       y = response_train, 
                       ntree = 1000, 
                       importance = T)

# compute importance scores
proteins_s2_train <- rf_train$importance %>% 
  as_tibble() %>%
  mutate(protein = rownames(rf_out$importance)) %>%
  slice_max(MeanDecreaseGini, n = 10) %>%
  pull(protein)

## training split logistic regression ##
########################################

# select subset of interest
proteins_sstar_train <- intersect(proteins_s1_train, proteins_s2_train)

biomarker_sstar_train <- data_train %>%
  select(group, any_of(proteins_sstar_train)) %>%
  mutate(class = (group == 'ASD')) %>%
  select(-group)

biomarker_sstar_test <- data_test %>%
  select(group, any_of(proteins_sstar_train)) %>%
  mutate(class = (group == 'ASD')) %>%
  select(-group)

# fit logistic regression model to training set
fit_train <- glm(class ~ ., 
           data = biomarker_sstar_train, 
           family = 'binomial')

biomarker_sstar_test %>%
  add_predictions(fit_train, type = 'response') %>%
  mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
  class_metrics(estimate = est,
                truth = tr_c, pred,
                event_level = 'second')
```

**Task 3 (larger panel of proteins)**

```{r}
# select top 20 proteins from multiple testing
proteins_s1_top20 <- ttests_out %>%
  slice_min(p.adj, n = 20) %>%
  pull(protein)

# select top 20 proteins from random forest
proteins_s2_top20 <- rf_out$importance %>% 
  as_tibble() %>%
  mutate(protein = rownames(rf_out$importance)) %>%
  slice_max(MeanDecreaseGini, n = 20) %>%
  pull(protein)

# logistic regression
proteins_sstar_top20 <- intersect(proteins_s1_top20, proteins_s2_top20)

biomarker_sstar_top20 <- biomarker_clean %>%
  select(group, any_of(proteins_sstar_top20)) %>%
  mutate(class = (group == 'ASD')) %>%
  select(-group)

# partition into training and test set
set.seed(101422)
biomarker_split_top20 <- biomarker_sstar_top20 %>%
  initial_split(prop = 0.8)

# fit logistic regression model to training set
fit_top20 <- glm(class ~ ., 
           data = training(biomarker_split_top20), 
           family = 'binomial')

# evaluate errors on test set

testing(biomarker_split_top20) %>%
  add_predictions(fit_top20, type = 'response') %>%
  mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
  class_metrics(estimate = est,
                truth = tr_c, pred,
                event_level = 'second')
```

### Improved classifier

**Task 4 (Improved panel of proteins)**

```{r}
# selected top 15 from multiple testing to prevent over-fitting
proteins_s1_improved <- ttests_out %>%
  slice_min(p.adj, n = 15) %>% 
  pull(protein)

# selected top 15 from multiple testing
proteins_s2_improved <- rf_out$importance %>% 
  as_tibble() %>%
  mutate(protein = rownames(rf_out$importance)) %>%
  slice_max(MeanDecreaseGini, n = 15) %>% 
  pull(protein)

# logistic regression
proteins_sstar_improved <- intersect(proteins_s1_improved, proteins_s2_improved)

biomarker_sstar_improved <- biomarker_clean %>%
  select(group, any_of(proteins_sstar_improved)) %>%
  mutate(class = (group == 'ASD')) %>%
  select(-group)

# partition into training and test set
set.seed(101422)
biomarker_split_improved <- biomarker_sstar_improved %>%
  initial_split(prop = 0.8)

# fit logistic regression model to training set
fit_improved <- glm(class ~ ., 
           data = training(biomarker_split_improved), 
           family = 'binomial')

testing(biomarker_split_improved) %>%
  add_predictions(fit_improved, type = 'response') %>%
  mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
  class_metrics(estimate = est,
                truth = tr_c, pred,
                event_level = 'second')
```
